// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  username    String     @db.VarChar(255)
  email       String     @unique @db.VarChar(255)
  password    String     @db.VarChar(255)
  role        String     @db.VarChar(255)
  phoneNumber String?    @db.VarChar(255)
  address     String?    @db.VarChar(255)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Lodging     Lodging[]
  Bookmark    Bookmark[]

  @@map("Users")
}

model Type {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Lodging   Lodging[]

  @@map("Types")
}

model Lodging {
  id           String     @id @default(uuid())
  name         String     @db.VarChar(255)
  facility     String
  roomCapacity Int
  imgUrl       String     @db.VarChar(255)
  AuthorId     String
  Author       User       @relation(fields: [AuthorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  location     String     @db.VarChar(255)
  price        Int
  TypeId       String
  Type         Type       @relation(fields: [TypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status       String     @default("Active") @db.VarChar(255)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Bookmark     Bookmark[]

  @@map("Lodgings")
}

model History {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(255)
  description String   @db.VarChar(255)
  updatedBy   String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Histories")
}

model Bookmark {
  id        String   @id @default(uuid())
  UserId    String
  User      User     @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  LodgingId String
  Lodging   Lodging  @relation(fields: [LodgingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Bookmarks")
}
